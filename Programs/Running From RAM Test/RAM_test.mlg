//	This program runs code from the ROM, copies a function to the RAM, then
//	jumps to that function in the RAM.
//	Note: Each page is 256 bytes long
//	Preamble - set dummy PC high byte register and stack page
0x14,  0x00, // 0x00: LSP %PC, #0x00		//	Dummy PC starts at page 0 (in ROM)
0x94,  0xdf, // 0x02: LSP %SP, #0xDF		//	Stack page is 223 (last RAM page)
// :main	//	main() runs in the ROM
	//	1.	Print "Running from ROM\n"
0x0d,  0x52, // 0x04: 	OUT #0x52, A	//	Print 'R'
0x0d,  0x75, // 0x06: 	OUT #0x75, A	//	Print 'u'
0x0d,  0x6e, // 0x08: 	OUT #0x6e, A	//	Print 'n'
0x0d,  0x6e, // 0x0a: 	OUT #0x6e, A	//	Print 'n'
0x0d,  0x69, // 0x0c: 	OUT #0x69, A	//	Pring 'i'
0x0d,  0x6e, // 0x0e: 	OUT #0x6e, A	//	Print 'n'
0x0d,  0x67, // 0x10: 	OUT #0x67, A	//	Print 'g'
0x0d,  0x20, // 0x12: 	OUT #0x20, A	//	Print ' '
0x0d,  0x66, // 0x14: 	OUT #0x66, A	//	Print 'f'
0x0d,  0x72, // 0x16: 	OUT #0x72, A	//	Print 'r'
0x0d,  0x6f, // 0x18: 	OUT #0x6f, A	//	Print 'o'
0x0d,  0x6d, // 0x1a: 	OUT #0x6d, A	//	Print 'm'
0x0d,  0x20, // 0x1c: 	OUT #0x20, A	//	Print ' '
0x0d,  0x52, // 0x1e: 	OUT #0x52, A	//	Print 'R'
0x0d,  0x4f, // 0x20: 	OUT #0x4f, A	//	Print 'O'
0x0d,  0x4d, // 0x22: 	OUT #0x4d, A	//	Print 'M'
0x0d,  0x10, // 0x24: 	OUT #0x10, A	//	Print '\n'
	//	2.	Copy ram_function() to first RAM page
0x54,  0x20, // 0x26: 	LSP %DP, #0x20	//	Set DP to point to first RAM page (to copy ram_function
					//	from ROM to RAM)
0x03,  0x2d, // 0x28: 	LDR R0, :ram_function	//	Load R0 with ram_function address
0x06,  0x17, // 0x2a: 	DEC R0					//	Ensure R0 points to correct address (weird assembler shenanigans)
0x43,  0x00, // 0x2c: 	LDR R1, #0		//	Load R1 with starting address in RAM page
0x83,  0x12, // 0x2e: 	LDR R2, #18		//	Length of copy (length of ram_function in instructions)
0x86,  0x18, // 0x30: 	ASL R2, #1		//	R2 = R2 << 1 (length of ram_function in bytes)
// :while_loop
0x86,  0x06, // 0x32: 	TST R2				//	while (R2 != 0)
0x65,  0x23, // 0x34: 	BEQ :after_while	//	{
0x54,  0x00, // 0x36: 	LSP %DP, #0x00		//		DP points to first ROM page
0xcb,  0x00, // 0x38: 	LMR R3, R0			//		R3 = *({0x00, R0})
0x54,  0x20, // 0x3a: 	LSP %DP, #0x20		//		DP points to page 0x20 in RAM
0xcc,  0x10, // 0x3c: 	SMR R3, R1			//		*({0x20, R1}) = R3
0x06,  0x16, // 0x3e: 	INC R0				//		R0++
0x46,  0x16, // 0x40: 	INC R1				//		R1++
0x86,  0x17, // 0x42: 	DEC R2				//		R2--
0x05,  0x19, // 0x44: 	JMP :while_loop		//	}
// :after_while
	//	3.	Call ram_function()
0x14,  0x20, // 0x46: 	LSP %PC, #0x20	//	Set dummy PC high byte to #0x20 (first RAM page)
0x03,  0x00, // 0x48: 	LDR R0, #0x00	//	R0 = 0x00
0x0e,  0x00, // 0x4a: 	PUSH R0 		//	Push high byte of return address
0x10,  0x2c, // 0x4c: 	JSR	:ram_function			//	Call ram_function()
	//	4.	Print "Done"
0x0d,  0x44, // 0x4e: 	OUT #0x44, A	//	Print 'D'
0x0d,  0x6f, // 0x50: 	OUT #0x6f, A	//	Print 'o'
0x0d,  0x6e, // 0x52: 	OUT #0x6e, A	//	Print 'n'
0x0d,  0x65, // 0x54: 	OUT #0x65, A	//	Print 'e'
0x01,  0x00, // 0x56: 	BRK
// :ram_function
	//	ram_function() - stored in ROM then copied and run from RAM
	//	1. Print "Running from RAM\n"
0x0d,  0x52, // 0x58: 	OUT #0x52, A	//	Print 'R'
0x0d,  0x75, // 0x5a: 	OUT #0x75, A	//	Print 'u'
0x0d,  0x6e, // 0x5c: 	OUT #0x6e, A	//	Print 'n'
0x0d,  0x6e, // 0x5e: 	OUT #0x6e, A	//	Print 'n'
0x0d,  0x69, // 0x60: 	OUT #0x69, A	//	Pring 'i'
0x0d,  0x6e, // 0x62: 	OUT #0x6e, A	//	Print 'n'
0x0d,  0x67, // 0x64: 	OUT #0x67, A	//	Print 'g'
0x0d,  0x20, // 0x66: 	OUT #0x20, A	//	Print ' '
0x0d,  0x66, // 0x68: 	OUT #0x66, A	//	Print 'f'
0x0d,  0x72, // 0x6a: 	OUT #0x72, A	//	Print 'r'
0x0d,  0x6f, // 0x6c: 	OUT #0x6f, A	//	Print 'o'
0x0d,  0x6d, // 0x6e: 	OUT #0x6d, A	//	Print 'm'
0x0d,  0x20, // 0x70: 	OUT #0x20, A	//	Print ' '
0x0d,  0x52, // 0x72: 	OUT #0x52, A	//	Print 'R'
0x0d,  0x41, // 0x74: 	OUT #0x41, A	//	Print 'A'
0x0d,  0x4d, // 0x76: 	OUT #0x4d, A	//	Print 'M'
0x0d,  0x10, // 0x78: 	OUT #0x10, A	//	Print '\n'
	//	2.	Return
0x11,  0x00, // 0x7a: 	RTS
