// Setup
0x03,  0x00, // LDR R0, #0	// row (R0) = 0
0x0c,  0x00, // SMR R0, R0	// board[0] = 0
0x44,  0x00, // MOV R1, R0	// i (R1) = row
0x8b,  0x00, // LMR R2, R0	// col (R2) = board[row]
// start_loop
0x46,  0x17, // DEC R1		// i-- (R1 = R1 - 1)
0x25,  0x1a, // BMI #27 	// if i >= 0, continue (branch to valid if i < 0)
// Horizontal check
0xcb,  0x10, // LMR R3, R1	// R3 = board[i]
0xc2,  0xb7, // SUB R3, R3, R2	// R3 = board[i] - col
0x65,  0x1f, // BEQ #32		// if board[i] == col, branch to not_valid
// Diagonal check 1
0xcb,  0x10, // LMR R3, R1	// R3 = board[i]
0xc2,  0xb7, // SUB R3, R3, R2	// R3 = board[i] - col
0xc2,  0x37, // SUB R3, R3, R0	// R3 = board[i] - col - row
0xc2,  0x76, // ADD R3, R3, R1	// R3 = board[i] - col - row + i
0x65,  0x1f, // BEQ #32		// if board[i] == col + (row - i), branch to not_valid
// Diagonal check 2
0xcb,  0x10, // LMR R3, R1	// R3 = board[i]
0xc2,  0xb7, // SUB R3, R3, R2	// R3 = board[i] - col
0xc2,  0x36, // ADD R3, R3, R0	// R3 = board[i] - col + row
0xc2,  0x77, // SUB R3, R3, R1	// R3 = board[i] - col + row - i
0x65,  0x1f, // BEQ #32		// if board[i] == col - (row - i), branch to not_valid
0x05,  0x06, // JMP #7		// Goto start_loop
// valid:
0x06,  0x16, // INC R0		// row+=
0x83,  0x00, // LDR R2, #0	// R2 = 0
0x8c,  0x00, // SMR R2, R0	// board[row] = 0
0x05,  0x31, // JMP #50		// Goto loop_check
// not_valid:
0x8b,  0x00, // LMR R2, R0	// R2 = board[row]
0x86,  0x16, // INC R2		// R2 = board[row] + 1
0x8c,  0x00, // SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // LDR R3, #8	// R3 = 8
0xc2,  0xe7, // SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x31, // BMI #50		// if board[row] < 8, go to loop_check
0x06,  0x17, // DEC R0		// row--
0x8b,  0x00, // LMR R2, R0	// R2 = board[row]
0x86,  0x16, // INC R2		// R2 = board[row] + 1
0x8c,  0x00, // SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // LDR R3, #8	// R3 = 8
0xc2,  0xe7, // SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x31, // BMI #50		// if board[row] < 8, go to loop_check
0x06,  0x17, // DEC R0		// row--
0x8b,  0x00, // LMR R2, R0	// R2 = board[row]
0x86,  0x16, // INC R2		// R2 = board[row] + 1
0x8c,  0x00, // SMR R2, R0	// board[row] = board[row] + 1
// loop_check:
0xc3,  0x08, // LDR R3, #8	// R3 = 8
0xc2,  0xc7, // SUB R3, R0, R3	// R3 = row - 8
0x25,  0x06, // BMI #7		// if row < 8, branch to start_loop
// Print Solution (setup)
0x83,  0x00, // LDR R2, #0	// R2 = 0
0x43,  0x41, // LDR R1, #65	// R1 = 'A'
// print_solution:
0xcb,  0x20, // LMR R3, R2	// R3 = board[R2]
0x08,  0x10, // OUT R1, A	// Print rank (letter)
0x08,  0x30, // OUT R3, A	// Print number (row)
0x86,  0x16, // INC R2		// R2++
0x46,  0x16, // INC R1		// R1++
0xc3,  0x08, // LDR R3, #8	// R3 = 8
0xc2,  0xe7, // SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x38, // BMI #57		// if R2 < 8, go to print_solution
0x01,  0x00, // BRK
