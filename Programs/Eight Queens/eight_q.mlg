// Setup
0x03,  0x00, // 1: LDR R0, #0	// row (R0) = 0
0x0c,  0x00, // 2: SMR R0, R0	// board[0] = 0
// for_loop_start
0x44,  0x00, // 3: MOV R1, R0	// i (R1) = row
0x8b,  0x00, // 4: LMR R2, R0	// col (R2) = board[row]
0x46,  0x17, // 5: DEC R1      // i = row - 1
// for_loop_check
0x25,  0x13, // 6: BMI #20 	// if i >= 0, continue (branch to valid if i < 0)
// for_loop_body
// (Horizontal check)
0xcb,  0x10, // 7: LMR R3, R1	// R3 = board[i]
0xc2,  0xb7, // 8: SUB R3, R3, R2	// R3 = board[i] - col
0x65,  0x17, // 9: BEQ #24		// if board[i] == col, branch to not_valid
// Diagonal check 1
0xc2,  0x37, // 10: SUB R3, R3, R0	// R3 = board[i] - col - row
0xc2,  0x76, // 11: ADD R3, R3, R1	// R3 = board[i] - col - row + i
0x65,  0x17, // 12: BEQ #24		// if board[i] == col + (row - i), branch to not_valid
// Diagonal check 2
0xcb,  0x10, // 13: LMR R3, R1	// R3 = board[i]
0xc2,  0xb7, // 14: SUB R3, R3, R2	// R3 = board[i] - col
0xc2,  0x36, // 15: ADD R3, R3, R0	// R3 = board[i] - col + row
0xc2,  0x77, // 16: SUB R3, R3, R1	// R3 = board[i] - col + row - i
0x65,  0x17, // 17: BEQ #24		// if board[i] == col - (row - i), branch to not_valid
// for_loop_update
0x86,  0x17, // 18: DEC R2              // i--
0x05,  0x05, // 19: JMP #6 // goto for_loop_check
// valid
0x06,  0x16, // 20: INC R0		// row++
0x83,  0x00, // 21: LDR R2, #0	// R2 = 0
0x8c,  0x00, // 22: SMR R2, R0	// board[row] = 0
0x05,  0x28, // 23: JMP #41		// Goto while_loop_check
// not_valid
0x8b,  0x00, // 24: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 25: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 26: SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // 27: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 28: SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x28, // 29: BMI #41		// if board[row] < 8, go to while_loop_check
0x06,  0x17, // 30: DEC R0		// row--
0x8b,  0x00, // 31: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 32: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 33: SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // 34: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 35: SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x28, // 36: BMI #41		// if board[row] < 8, go to while_loop_check
0x06,  0x17, // 37: DEC R0		// row--
0x8b,  0x00, // 38: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 39: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 40: SMR R2, R0	// board[row] = board[row] + 1
// while_loop_check
0x08,  0x00, // 41: OUT R0, A   // Print row
0x8b,  0x00, // 42: LMR R2, R0	// R2 = board[row]
0x08,  0x20, // 43: OUT R2, A
0x0d,  0x20, // 44: OUT #0x20, A
0xc3,  0x08, // 45: LDR R3, #8	// R3 = 8
0xc2,  0xc7, // 46: SUB R3, R0, R3	// R3 = row - 8
0x25,  0x02, // 47: BMI #3		// if row < 8, branch to for_loop_start
// Print Solution (setup)
0x83,  0x00, // 48: LDR R2, #0	// R2 = 0
0x43,  0x41, // 49: LDR R1, #65	// R1 = 'A'
// print_solution
0xcb,  0x20, // 50: LMR R3, R2	// R3 = board[R2]
0x08,  0x10, // 51: OUT R1, A	// Print rank (letter)
0x08,  0x30, // 52: OUT R3, A	// Print number (row)
0x86,  0x16, // 53: INC R2		// R2++
0x46,  0x16, // 54: INC R1		// R1++
0xc3,  0x08, // 55: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 56: SUB R3, R2, R3	// R3 = R2 - 8
0x27,  0xf8, // 57: BMI -7		// if R2 < 8, go to print_solution
0x01,  0x00, // 58: BRK
