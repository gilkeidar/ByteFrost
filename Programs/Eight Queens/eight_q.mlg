// Setup
0x03,  0x00, // 0x01: LDR R0, #0	// row (R0) = 0
0x0c,  0x00, // 0x02: SMR R0, R0	// board[0] = 0
// :for_loop_start
0x44,  0x00, // 0x03: MOV R1, R0	// i (R1) = row
0x8b,  0x00, // 0x04: LMR R2, R0	// col (R2) = board[row]
0x46,  0x17, // 0x05: DEC R1      // i = row - 1
// :for_loop_check
0x25,  0x13, // 0x06: BMI #0x14 	// if i >= 0, continue (branch to :valid if i < 0)
// for_loop_body
// (Horizontal check)
0xcb,  0x10, // 0x07: LMR R3, R1	// R3 = board[i]
0xc2,  0xb7, // 0x08: SUB R3, R3, R2	// R3 = board[i] - col
0x65,  0x17, // 0x09: BEQ #0x18		// if board[i] == col, branch to :not_valid
// Diagonal check 1
0xc2,  0x37, // 0x0a: SUB R3, R3, R0	// R3 = board[i] - col - row
0xc2,  0x76, // 0x0b: ADD R3, R3, R1	// R3 = board[i] - col - row + i
0x65,  0x17, // 0x0c: BEQ #0x18		// if board[i] == col + (row - i), branch to :not_valid
// Diagonal check 2
0xcb,  0x10, // 0x0d: LMR R3, R1	// R3 = board[i]
0xc2,  0x36, // 0x0e: ADD R3, R3, R0	// R3 = board[i] + row
0xc2,  0xb7, // 0x0f: SUB R3, R3, R2	// R3 = board[i] +row - col
0xc2,  0x77, // 0x10: SUB R3, R3, R1	// R3 = board[i] - col + row - i
0x65,  0x17, // 0x11: BEQ #0x18		// if board[i] == col - (row - i), branch to :not_valid
// for_loop_update
0x46,  0x17, // 0x12: DEC R1              // i--
0x05,  0x05, // 0x13: JMP #0x06 // goto :for_loop_check
// :valid
0x06,  0x16, // 0x14: INC R0		// row++
0x83,  0x00, // 0x15: LDR R2, #0	// R2 = 0
0x8c,  0x00, // 0x16: SMR R2, R0	// board[row] = 0
0x05,  0x28, // 0x17: JMP #0x29		// Goto :while_loop_check
// not_valid
0x8b,  0x00, // 0x18: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x19: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x1a: SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // 0x1b: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x1c: SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x28, // 0x1d: BMI #0x29		// if board[row] < 8, go to :while_loop_check
0x06,  0x17, // 0x1e: DEC R0		// row--
0x8b,  0x00, // 0x1f: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x20: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x21: SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // 0x22: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x23: SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x28, // 0x24: BMI #0x29		// if board[row] < 8, go to :while_loop_check
0x06,  0x17, // 0x25: DEC R0		// row--
0x8b,  0x00, // 0x26: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x27: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x28: SMR R2, R0	// board[row] = board[row] + 1
// :while_loop_check
0x08,  0x00, // 0x29: OUT R0, A   // Print row
0x8b,  0x00, // 0x2a: LMR R2, R0	// R2 = board[row]
0x08,  0x20, // 0x2b: OUT R2, A
0x0d,  0x20, // 0x2c: OUT #0x20, A
0xc3,  0x08, // 0x2d: LDR R3, #8	// R3 = 8
0xc2,  0xc7, // 0x2e: SUB R3, R0, R3	// R3 = row - 8
0x25,  0x02, // 0x2f: BMI #0x03		// if row < 8, branch to :for_loop_start
// Print Solution (setup)
0x83,  0x00, // 0x30: LDR R2, #0	// R2 = 0
0x43,  0x41, // 0x31: LDR R1, #65	// R1 = 'A'
// print_solution
0xcb,  0x20, // 0x32: LMR R3, R2	// R3 = board[R2]
0x08,  0x10, // 0x33: OUT R1, A	// Print rank (letter)
0x08,  0x30, // 0x34: OUT R3, A	// Print number (row)
0x86,  0x16, // 0x35: INC R2		// R2++
0x46,  0x16, // 0x36: INC R1		// R1++
0xc3,  0x08, // 0x37: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x38: SUB R3, R2, R3	// R3 = R2 - 8
0x27,  0xf8, // 0x39: BMI -7		// if R2 < 8, go to print_solution
0x01,  0x00, // 0x3a: BRK
