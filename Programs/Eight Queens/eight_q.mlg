//////////////////////////////////
// Enhance to 16bit address range
// 0x0000 .. 0x1FFF  ROM 
// 0x2000 .. 0xDFFF  RAM
// 0xE000 .. 0xFFFF  Registers (MMIO)
// Set Data Pointer to  0x4000
// Set Stack Pointer to 0x7700
//////////////////////////////////

0x54,  0x40, // 0x00: LSP %DP, #0x40
0x94,  0x77, // 0x02: LSP %SP, #0x77

// Setup
0x03,  0x00, // 0x04: LDR R0, #0	// row (R0) = 0
0x0c,  0x00, // 0x06: SMR R0, R0	// board[0] = 0
// :for_loop_start
0x44,  0x00, // 0x08: MOV R1, R0	// i (R1) = row
0x8b,  0x00, // 0x0a: LMR R2, R0	// col (R2) = board[row]
0x46,  0x17, // 0x0c: DEC R1      // i = row - 1
// :for_loop_check
0x25,  0x13, // 0x0e: BMI #0x14 	// if i >= 0, continue (branch to :valid if i < 0)
// for_loop_body
// (Horizontal check)
0xcb,  0x10, // 0x10: LMR R3, R1	// R3 = board[i]
0xc2,  0xb7, // 0x12: SUB R3, R3, R2	// R3 = board[i] - col
0x65,  0x17, // 0x14: BEQ #0x18		// if board[i] == col, branch to :not_valid
// Diagonal check 1
0xc2,  0x37, // 0x16: SUB R3, R3, R0	// R3 = board[i] - col - row
0xc2,  0x76, // 0x18: ADD R3, R3, R1	// R3 = board[i] - col - row + i
0x65,  0x17, // 0x1a: BEQ #0x18		// if board[i] == col + (row - i), branch to :not_valid
// Diagonal check 2
0xcb,  0x10, // 0x1c: LMR R3, R1	// R3 = board[i]
0xc2,  0x36, // 0x1e: ADD R3, R3, R0	// R3 = board[i] + row
0xc2,  0xb7, // 0x20: SUB R3, R3, R2	// R3 = board[i] +row - col
0xc2,  0x77, // 0x22: SUB R3, R3, R1	// R3 = board[i] - col + row - i
0x65,  0x17, // 0x24: BEQ #0x18		// if board[i] == col - (row - i), branch to :not_valid
// for_loop_update
0x46,  0x17, // 0x26: DEC R1              // i--
0x05,  0x05, // 0x28: JMP #0x06 // goto :for_loop_check
// :valid
0x06,  0x16, // 0x2a: INC R0		// row++
0x83,  0x00, // 0x2c: LDR R2, #0	// R2 = 0
0x8c,  0x00, // 0x2e: SMR R2, R0	// board[row] = 0
0x05,  0x28, // 0x30: JMP #0x29		// Goto :while_loop_check
// not_valid
0x8b,  0x00, // 0x32: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x34: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x36: SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // 0x38: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x3a: SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x28, // 0x3c: BMI #0x29		// if board[row] < 8, go to :while_loop_check
0x06,  0x17, // 0x3e: DEC R0		// row--
0x8b,  0x00, // 0x40: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x42: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x44: SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // 0x46: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x48: SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x28, // 0x4a: BMI #0x29		// if board[row] < 8, go to :while_loop_check
0x06,  0x17, // 0x4c: DEC R0		// row--
0x8b,  0x00, // 0x4e: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x50: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x52: SMR R2, R0	// board[row] = board[row] + 1
// :while_loop_check
0x08,  0x00, // 0x54: OUT R0, A   // Print row
0x8b,  0x00, // 0x56: LMR R2, R0	// R2 = board[row]
0x08,  0x20, // 0x58: OUT R2, A
0x0d,  0x20, // 0x5a: OUT #0x20, A
0xc3,  0x08, // 0x5c: LDR R3, #8	// R3 = 8
0xc2,  0xc7, // 0x5e: SUB R3, R0, R3	// R3 = row - 8
0x25,  0x02, // 0x60: BMI #0x03		// if row < 8, branch to :for_loop_start
// Print Solution (setup)
0x83,  0x00, // 0x62: LDR R2, #0	// R2 = 0
0x43,  0x41, // 0x64: LDR R1, #65	// R1 = 'A'
// print_solution
0xcb,  0x20, // 0x66: LMR R3, R2	// R3 = board[R2]
0x08,  0x10, // 0x68: OUT R1, A	// Print rank (letter)
0x08,  0x30, // 0x6a: OUT R3, A	// Print number (row)
0x86,  0x16, // 0x6c: INC R2		// R2++
0x46,  0x16, // 0x6e: INC R1		// R1++
0xc3,  0x08, // 0x70: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x72: SUB R3, R2, R3	// R3 = R2 - 8
0x27,  0xf8, // 0x74: BMI -7		// if R2 < 8, go to print_solution
0x01,  0x00, // 0x76: BRK

