//////////////////////////////////
// Enhance to 16bit address range
// 0x0000 .. 0x1FFF  ROM 
// 0x2000 .. 0xDFFF  RAM
// 0xE000 .. 0xFFFF  Registers (MMIO)
// Set Data Pointer to  0x4000
// Set Stack Pointer to 0x7700
//////////////////////////////////

0x54,  0x40, // 0x00: LSP %DP, #0x40
0x94,  0x77, // 0x02: LSP %SP, #0x77

// Setup
0x03,  0x00, // 0x04: LDR R0, #0	// row (R0) = 0
0x0c,  0x00, // 0x06: SMR R0, R0	// board[0] = 0
0x0a,  0x09, // 0x08: SMA R0, #9  // num_solutions = 0
// :for_loop_start
0x44,  0x00, // 0x0a: MOV R1, R0	// i (R1) = row
0x8b,  0x00, // 0x0c: LMR R2, R0	// col (R2) = board[row]
0x46,  0x17, // 0x0e: DEC R1      // i = row - 1
// :for_loop_check
0x25,  0x16, // 0x10: BMI :valid 	// if i >= 0, continue (branch to :valid if i < 0)
// for_loop_body
// (Horizontal check)
0xcb,  0x10, // 0x12: LMR R3, R1	// R3 = board[i]
0xc2,  0xb7, // 0x14: SUB R3, R3, R2	// R3 = board[i] - col
0x65,  0x1a, // 0x16: BEQ :not_valid		// if board[i] == col, branch to :not_valid
// Diagonal check 1
0xc2,  0x37, // 0x18: SUB R3, R3, R0	// R3 = board[i] - col - row
0xc2,  0x76, // 0x1a: ADD R3, R3, R1	// R3 = board[i] - col - row + i
0x65,  0x1a, // 0x1c: BEQ :not_valid		// if board[i] == col + (row - i), branch to :not_valid
// Diagonal check 2
0xcb,  0x10, // 0x1e: LMR R3, R1	// R3 = board[i]
0xc2,  0xb7, // 0x20: SUB R3, R3, R2	// R3 = board[i] - col
0xc2,  0x36, // 0x22: ADD R3, R3, R0	// R3 = board[i] - col + row
0xc2,  0x77, // 0x24: SUB R3, R3, R1	// R3 = board[i] - col + row - i
0x65,  0x1a, // 0x26: BEQ :not_valid		// if board[i] == col - (row - i), branch to :not_valid
// for_loop_update
0x46,  0x17, // 0x28: DEC R1              // i--
0x05,  0x08, // 0x2a: JMP :for_loop_check // goto :for_loop_check
// :valid
0x06,  0x16, // 0x2c: INC R0		// row++
0x83,  0x00, // 0x2e: LDR R2, #0	// R2 = 0
0x8c,  0x00, // 0x30: SMR R2, R0	// board[row] = 0
0x05,  0x2c, // 0x32: JMP :while_loop_check		// Goto :while_loop_check
// :not_valid
0x8b,  0x00, // 0x34: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x36: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x38: SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // 0x3a: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x3c: SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x2c, // 0x3e: BMI :while_loop_check		// if board[row] < 8, go to :while_loop_check
0x06,  0x17, // 0x40: DEC R0		// row--
0x8b,  0x00, // 0x42: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x44: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x46: SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // 0x48: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x4a: SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x2c, // 0x4c: BMI :while_loop_check		// if board[row] < 8, go to :while_loop_check
0x06,  0x17, // 0x4e: DEC R0		// row--
0x25,  0x54, // 0x50: BMI :end    // If row < 0, goto end
0x8b,  0x00, // 0x52: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x54: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x56: SMR R2, R0	// board[row] = board[row] + 1
// :while_loop_check
//OUT R0, A   // Print row
//LMR R2, R0	// R2 = board[row]
//OUT R2, A
//OUT #0x20, A
0xc3,  0x08, // 0x58: LDR R3, #8	// R3 = 8
0xc2,  0xc7, // 0x5a: SUB R3, R0, R3	// R3 = row - 8
0x25,  0x05, // 0x5c: BMI :for_loop_start		// if row < 8, branch to :for_loop_start
// Print Solution (setup)
0xc9,  0x09, // 0x5e: LMA R3, #9  // R3 = num_solutions
0xc6,  0x16, // 0x60: INC R3      // R3 = num_solutions + 1
0xca,  0x09, // 0x62: SMA R3, #9  // num_solutions = num_solutions + 1
0x28,  0x30, // 0x64: OUT R3, I       // Print solution number
0x0d,  0x3a, // 0x66: OUT #0x3A, A    // Print ':'
0x0d,  0x20, // 0x68: OUT #0x20, A    // Print ' '
0x83,  0x00, // 0x6a: LDR R2, #0	// R2 = 0
0x43,  0x41, // 0x6c: LDR R1, #65	// R1 = 'A'
// :print_solution
0xcb,  0x20, // 0x6e: LMR R3, R2	// R3 = board[R2]
0x08,  0x10, // 0x70: OUT R1, A	// Print rank (letter)
0xc6,  0x16, // 0x72: INC R3      // Increment the number (print 1-indexed)
0x08,  0x30, // 0x74: OUT R3, A	// Print number (row)
0x86,  0x16, // 0x76: INC R2		// R2++
0x46,  0x16, // 0x78: INC R1		// R1++
0xc3,  0x08, // 0x7a: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x7c: SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x37, // 0x7e: BMI :print_solution		// if R2 < 8, go to print_solution
0x0d,  0x10, // 0x80: OUT #0x10, A  // Print '\n'
// move_next
0x06,  0x17, // 0x82: DEC R0      // row--
0x8b,  0x00, // 0x84: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x86: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x88: SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // 0x8a: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x8c: SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x05, // 0x8e: BMI :for_loop_start		// if board[row] < 8, go to :for_loop_start
0x06,  0x17, // 0x90: DEC R0		// row--
0x8b,  0x00, // 0x92: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x94: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x96: SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // 0x98: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x9a: SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x05, // 0x9c: BMI :for_loop_start		// if board[row] < 8, go to :for_loop_start
0x06,  0x17, // 0x9e: DEC R0		// row--
0x25,  0x54, // 0xa0: BMI :end    // If row < 0, goto end
0x8b,  0x00, // 0xa2: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0xa4: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0xa6: SMR R2, R0	// board[row] = board[row] + 1
// :end
0x0d,  0x2e, // 0xa8: OUT #0x2E, A // Print '.'
0x01,  0x00, // 0xaa: BRK

