// Setup
0x03,  0x00, // 0x01: LDR R0, #0	// row (R0) = 0
0x0c,  0x00, // 0x02: SMR R0, R0	// board[0] = 0
0x0a,  0x09, // 0x03: SMA R0, #9  // num_solutions = 0
// :for_loop_start
0x44,  0x00, // 0x04: MOV R1, R0	// i (R1) = row
0x8b,  0x00, // 0x05: LMR R2, R0	// col (R2) = board[row]
0x46,  0x17, // 0x06: DEC R1      // i = row - 1
// :for_loop_check
0x25,  0x14, // 0x07: BMI #0x15 	// if i >= 0, continue (branch to :valid if i < 0)
// for_loop_body
// (Horizontal check)
0xcb,  0x10, // 0x08: LMR R3, R1	// R3 = board[i]
0xc2,  0xb7, // 0x09: SUB R3, R3, R2	// R3 = board[i] - col
0x65,  0x18, // 0x0a: BEQ #0x19		// if board[i] == col, branch to :not_valid
// Diagonal check 1
0xc2,  0x37, // 0x0b: SUB R3, R3, R0	// R3 = board[i] - col - row
0xc2,  0x76, // 0x0c: ADD R3, R3, R1	// R3 = board[i] - col - row + i
0x65,  0x18, // 0x0d: BEQ #0x19		// if board[i] == col + (row - i), branch to :not_valid
// Diagonal check 2
0xcb,  0x10, // 0x0e: LMR R3, R1	// R3 = board[i]
0xc2,  0xb7, // 0x0f: SUB R3, R3, R2	// R3 = board[i] - col
0xc2,  0x36, // 0x10: ADD R3, R3, R0	// R3 = board[i] - col + row
0xc2,  0x77, // 0x11: SUB R3, R3, R1	// R3 = board[i] - col + row - i
0x65,  0x18, // 0x12: BEQ #0x19		// if board[i] == col - (row - i), branch to :not_valid
// for_loop_update
0x46,  0x17, // 0x13: DEC R1              // i--
0x05,  0x06, // 0x14: JMP #7 // goto :for_loop_check
// :valid
0x06,  0x16, // 0x15: INC R0		// row++
0x83,  0x00, // 0x16: LDR R2, #0	// R2 = 0
0x8c,  0x00, // 0x17: SMR R2, R0	// board[row] = 0
0x05,  0x2a, // 0x18: JMP #0x2b		// Goto :while_loop_check
// not_valid
0x8b,  0x00, // 0x19: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x1a: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x1b: SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // 0x1c: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x1d: SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x2a, // 0x1e: BMI #0x2b		// if board[row] < 8, go to :while_loop_check
0x06,  0x17, // 0x1f: DEC R0		// row--
0x8b,  0x00, // 0x20: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x21: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x22: SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // 0x23: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x24: SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x2a, // 0x25: BMI #0x2b		// if board[row] < 8, go to :while_loop_check
0x06,  0x17, // 0x26: DEC R0		// row--
0x25,  0x52, // 0x27: BMI #0x53    // If row < 0, goto end
0x8b,  0x00, // 0x28: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x29: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x2a: SMR R2, R0	// board[row] = board[row] + 1
// :while_loop_check
//OUT R0, A   // Print row
//LMR R2, R0	// R2 = board[row]
//OUT R2, A
//OUT #0x20, A
0xc3,  0x08, // 0x2b: LDR R3, #8	// R3 = 8
0xc2,  0xc7, // 0x2c: SUB R3, R0, R3	// R3 = row - 8
0x25,  0x03, // 0x2d: BMI #4		// if row < 8, branch to :for_loop_start
// Print Solution (setup)
0xc9,  0x09, // 0x2e: LMA R3, #9  // R3 = num_solutions
0xc6,  0x16, // 0x2f: INC R3      // R3 = num_solutions + 1
0xca,  0x09, // 0x30: SMA R3, #9  // num_solutions = num_solutions + 1
0x28,  0x30, // 0x31: OUT R3, I       // Print solution number
0x0d,  0x3a, // 0x32: OUT #0x3A, A    // Print ':'
0x0d,  0x20, // 0x33: OUT #0x20, A    // Print ' '
0x83,  0x00, // 0x34: LDR R2, #0	// R2 = 0
0x43,  0x41, // 0x35: LDR R1, #65	// R1 = 'A'
// print_solution
0xcb,  0x20, // 0x36: LMR R3, R2	// R3 = board[R2]
0x08,  0x10, // 0x37: OUT R1, A	// Print rank (letter)
0xc6,  0x16, // 0x38: INC R3      // Increment the number (print 1-indexed)
0x08,  0x30, // 0x39: OUT R3, A	// Print number (row)
0x86,  0x16, // 0x3a: INC R2		// R2++
0x46,  0x16, // 0x3b: INC R1		// R1++
0xc3,  0x08, // 0x3c: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x3d: SUB R3, R2, R3	// R3 = R2 - 8
0x27,  0xf7, // 0x3e: BMI -8		// if R2 < 8, go to print_solution
0x0d,  0x10, // 0x3f: OUT #0x10, A  // Print '\n'
// move_next
0x06,  0x17, // 0x40: DEC R0      // row--
0x8b,  0x00, // 0x41: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x42: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x43: SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // 0x44: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x45: SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x03, // 0x46: BMI #4		// if board[row] < 8, go to :for_loop_start
0x06,  0x17, // 0x47: DEC R0		// row--
0x8b,  0x00, // 0x48: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x49: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x4a: SMR R2, R0	// board[row] = board[row] + 1
0xc3,  0x08, // 0x4b: LDR R3, #8	// R3 = 8
0xc2,  0xe7, // 0x4c: SUB R3, R2, R3	// R3 = R2 - 8
0x25,  0x03, // 0x4d: BMI #4		// if board[row] < 8, go to :for_loop_start
0x06,  0x17, // 0x4e: DEC R0		// row--
0x25,  0x52, // 0x4f: BMI #0x53    // If row < 0, goto end
0x8b,  0x00, // 0x50: LMR R2, R0	// R2 = board[row]
0x86,  0x16, // 0x51: INC R2		// R2 = board[row] + 1
0x8c,  0x00, // 0x52: SMR R2, R0	// board[row] = board[row] + 1
// end
0x0d,  0x2e, // 0x53: OUT #0x2E, A // Print '.'
0x01,  0x00, // 0x54: BRK
