//////////////////////////////////
// Test 1: Shift Left (8: ASL)  //
//////////////////////////////////
0x2d,  0x01, // 0x01: OUT #01, I   // Print 01                  
0x0d,  0x20, // 0x02: OUT #0x20, A // Print ' '  
0x0d,  0x41, // 0x03: OUT #0x41, A // Print 'A'    
0x0d,  0x53, // 0x04: OUT #0x53, A // Print 'S'
0x0d,  0x4c, // 0x05: OUT #0x4C, A // Print 'L'    
0x0d,  0x3a, // 0x06: OUT #0x3A, A // Print ':'   
     
0x83,  0x5a, // 0x07: LDR R2, #0x5A
0x82,  0x28, // 0x08: ASL R2, R2 
0x28,  0x20, // 0x09: OUT R2, I     //            (0xB4)
0x0d,  0x20, // 0x0a: OUT #0x20, A  // Print ' '    

0x82,  0x28, // 0x0b: ASL R2, R2 
0x28,  0x20, // 0x0c: OUT R2, I     //            (0x68) + Carry
0x0d,  0x20, // 0x0d: OUT #0x20, A  // Print ' '    
0x82,  0x28, // 0x0e: ASL R2, R2    // (Unlike ROL, ASL does not take the carry in back)
0x28,  0x20, // 0x0f: OUT R2, I     //            (0xD0)   
0xc3,  0xd0, // 0x10: LDR R3, #0xD0 
0xc2,  0xb7, // 0x11: SUB R3, R3, R2           (carry is set)   
0x67,  0x01, // 0x12: BEQ +2        // RELATIVE JUMP
0x01,  0x00, // 0x13: BRK           // Test 1 failed
0xc6,  0x16, // 0x14: ADD R3, #0x01 // (reset carry)
0x0d,  0x10, // 0x15: OUT #0x10, A     // Newline

//////////////////////////////////
// Test 2: Rotate Left (9: ROL) //
//////////////////////////////////
0x2d,  0x02, // 0x16: OUT #02, I   // Print 02                  
0x0d,  0x20, // 0x17: OUT #0x20, A // Print ' '  
0x0d,  0x52, // 0x18: OUT #0x52, A // Print 'R'    
0x0d,  0x4f, // 0x19: OUT #0x4F, A // Print 'O'
0x0d,  0x4c, // 0x1a: OUT #0x4C, A // Print 'L'    
0x0d,  0x3a, // 0x1b: OUT #0x3A, A // Print ':'   

0x83,  0x34, // 0x1c: LDR R2, #0x34
0x82,  0x29, // 0x1d: ROL R2, R2    // 34 -> 68 
0x28,  0x20, // 0x1e: OUT R2, I     //           (0x68)
0x0d,  0x20, // 0x1f: OUT #0x20, A  // Print ' '  
0x82,  0x29, // 0x20: ROL R2, R2    // 68 -> D0 
0x28,  0x20, // 0x21: OUT R2, I     //           (0xD0)
0x0d,  0x20, // 0x22: OUT #0x20, A  // Print ' '  
0x82,  0x29, // 0x23: ROL R2, R2    // D0 -> A0 + C 
0x28,  0x20, // 0x24: OUT R2, I     //           (0xA0)
0x0d,  0x20, // 0x25: OUT #0x20, A  // Print ' '  
0x82,  0x29, // 0x26: ROL R2, R2    // C+A0 -> 41 + C 
0x28,  0x20, // 0x27: OUT R2, I     //           (0x41)
0x47,  0x01, // 0x28: BCS +2        // RELATIVE JUMP
0x01,  0x00, // 0x29: BRK           // Test 2 failed: Carry was not set
0xc3,  0x41, // 0x2a: LDR R3, #0x41 
0xc2,  0xb7, // 0x2b: SUB R3, R3, R2
0x67,  0x01, // 0x2c: BEQ +02       // RELATIVE JUMP
0x01,  0x00, // 0x2d: BRK           // Test 2 failed: Result is not 0x41    
0x0d,  0x10, // 0x2e: OUT #0x10, A  // Newline
    
///////////////////////////////////////////
// Test 3: Logic Shift Right  (A: LSR)   //
///////////////////////////////////////////
0x2d,  0x03, // 0x2f: OUT #03, I   // Print 03                  
0x0d,  0x20, // 0x30: OUT #0x20, A // Print ' '  
0x0d,  0x4c, // 0x31: OUT #0x4C, A // Print 'L'  
0x0d,  0x53, // 0x32: OUT #0x53, A // Print 'S'
0x0d,  0x52, // 0x33: OUT #0x52, A // Print 'R'    
0x0d,  0x3a, // 0x34: OUT #0x3A, A // Print ':'   
  
0x83,  0x87, // 0x35: LDR R2, #0x87
0x82,  0x2a, // 0x36: LSR R2, R2    // 87 -> 43 + Carry
0x28,  0x20, // 0x37: OUT R2, I     //           (0x43)
0x0d,  0x20, // 0x38: OUT #0x20, A  // Print ' ' 
0x82,  0x2a, // 0x39: LSR R2, R2    // 43 -> 21 + Carry
0x28,  0x20, // 0x3a: OUT R2, I     //           (0x21)
0x0d,  0x20, // 0x3b: OUT #0x20, A  // Print ' ' 
0x47,  0x01, // 0x3c: BCS +02       // Relative
0x01,  0x00, // 0x3d: BRK           // Test 3 failed: Carry was not set
0xc3,  0x21, // 0x3e: LDR R3, #0x21 
0xc2,  0xb7, // 0x3f: SUB R3, R3, R2
0x67,  0x01, // 0x40: BEQ +02       // relative
0x01,  0x00, // 0x41: BRK           // Test 3 failed: Result is not 0x21    
0x0d,  0x10, // 0x42: OUT #0x10, A  // Newline

//////////////////////////////////////////////
// Test 4: Arithmetic Shift Right  (B: ASR) //
//////////////////////////////////////////////
0x2d,  0x04, // 0x43: OUT #04, I   // Print 04                  
0x0d,  0x20, // 0x44: OUT #0x20, A // Print ' '  
0x0d,  0x41, // 0x45: OUT #0x41, A // Print 'A'   
0x0d,  0x53, // 0x46: OUT #0x53, A // Print 'S'
0x0d,  0x52, // 0x47: OUT #0x52, A // Print 'R'    
0x0d,  0x3a, // 0x48: OUT #0x3A, A // Print ':'   

0x83,  0x87, // 0x49: LDR R2, #0x87
0x82,  0x2b, // 0x4a: ASR R2, R2    // 87 -> C3 + Carry
0x28,  0x20, // 0x4b: OUT R2, I     //           (0xC3)
0x0d,  0x20, // 0x4c: OUT #0x20, A  // Print ' '  
0x82,  0x2b, // 0x4d: ASR R2, R2    // C3 -> E1 + Carry
0x28,  0x20, // 0x4e: OUT R2, I     //           (0xE1)
0x47,  0x01, // 0x4f: BCS +02       // Relative
0x01,  0x00, // 0x50: BRK           // Test 4 failed: Carry was not set
0xc3,  0xe1, // 0x51: LDR R3, #0xE1 
0xc2,  0xb7, // 0x52: SUB R3, R3, R2
0x67,  0x01, // 0x53: BEQ +02       // Relative
0x01,  0x00, // 0x54: BRK           // Test 4 failed: Result is not 0xE1    
0x0d,  0x10, // 0x55: OUT #0x10, A  // Newline

//////////////////////////////////////////////
// Test 5: Add 0x1234 + 0x6DCD =  0x8001    //
//////////////////////////////////////////////
 
0x2d,  0x05, // 0x56:     OUT #05, I   // Print 05                  
0x0d,  0x20, // 0x57:     OUT #0x20, A // Print ' '  
0x0d,  0x41, // 0x58:     OUT #0x41, A // Print 'A'   
0x0d,  0x44, // 0x59:     OUT #0x44, A // Print 'D'
0x0d,  0x44, // 0x5a:     OUT #0x44, A // Print 'D'    
0x0d,  0x3a, // 0x5b:     OUT #0x3A, A // Print ':'   

0x83,  0x34, // 0x5c:     LDR R2, #0x34
0x43,  0xcd, // 0x5d:     LDR R1, #0xCD
0xc2,  0x66, // 0x5e:     ADD R3, R2, R1    // 34 + CD =  0x01 + Carry
0x28,  0x30, // 0x5f:     OUT R3, I    //  (0x01)
0x0d,  0x20, // 0x60:     OUT #0x20, A // Print ' '  
    
0x47,  0x01, // 0x61:     BCS +02      // Relative
0x01,  0x00, // 0x62:     BRK          // Test 5 failed: Carry was not set
0x83,  0x12, // 0x63:     LDR R2, #0x12
0x43,  0x6d, // 0x64:     LDR R1, #0x6D
0xc2,  0x6e, // 0x65:     ADC R3, R2, R1  // 0x80 = 0x12 + 0x6D + Carry  
0x28,  0x30, // 0x66:     OUT R3, I    //       (0x80)
0xc7,  0x01, // 0x67:     BCC +02      // Relative
0x01,  0x00, // 0x68:     BRK          // Test 5 failed: Carry was  set
0x83,  0x80, // 0x69:     LDR R2, #0x80
0xc2,  0xb7, // 0x6a:     SUB R3, R3, R2
0x67,  0x01, // 0x6b:     BEQ +02      // Relative
0x01,  0x00, // 0x6c:     BRK          // Test 5 failed: Result is not 0x80    
0x0d,  0x10, // 0x6d:     OUT #0x10, A  // Newline

//////////////////////////////////////////////
// Test 6: Sub (0xA765 â€“ 0x34AB) = 0x72BA   //  
//////////////////////////////////////////////

0x2d,  0x06, // 0x6e:     OUT #06, I   // Print 06                  
0x0d,  0x20, // 0x6f:     OUT #0x20, A // Print ' '  
0x0d,  0x53, // 0x70:     OUT #0x53, A // Print 'S'
0x0d,  0x55, // 0x71:     OUT #0x55, A // Print 'U'
0x0d,  0x42, // 0x72:     OUT #0x42, A // Print 'B'    
0x0d,  0x3a, // 0x73:     OUT #0x3A, A // Print ':'   

0x83,  0x65, // 0x74:     LDR R2, #0x65
0x43,  0xab, // 0x75:     LDR R1, #0xAB
0xc2,  0x67, // 0x76:     SUB R3, R2, R1    // 65 - AB =  0xBA + Carry
0x28,  0x30, // 0x77:     OUT R3, I         // (0xBA) (No carry, means borrow)
0x0d,  0x20, // 0x78:     OUT #0x20, A      // Print ' '  
0xc7,  0x01, // 0x79:     BCC +02           // Relative
0x01,  0x00, // 0x7a:     BRK               // Test 6 failed: Carry was set
0x83,  0xa7, // 0x7b:     LDR R2, #0xA7
0x43,  0x34, // 0x7c:     LDR R1, #0x34
0xc2,  0x6f, // 0x7d:     SBC R3, R2, R1    // R2 - R1 + Cin = A7 - 34 + Cin = 72 + Cout
0x28,  0x30, // 0x7e:     OUT R3, I         //  (0x72)
0x47,  0x01, // 0x7f:     BCS +02           // Relative
0x01,  0x00, // 0x80:     BRK               // Test 6 failed: Carry was not set
0x83,  0x72, // 0x81:     LDR R2, #0x72
0xc2,  0xb7, // 0x82:     SUB R3, R3, R2
0x67,  0x01, // 0x83:     BEQ +02      // Relative
0x01,  0x00, // 0x84:     BRK          // Test 6 failed: Result is not 0x72       
0x0d,  0x10, // 0x85:     OUT #0x10, A  // Newline

////////////////////////////////////
// Test 7: Rotate Right (C: ROR)  //
////////////////////////////////////

0x0d,  0x07, // 0x86:     OUT #07, A   // Print 7                  
0x0d,  0x20, // 0x87:     OUT #0x20, A // Print ' '  
0x0d,  0x52, // 0x88:     OUT #0x52, A // Print 'R'    
0x0d,  0x4f, // 0x89:     OUT #0x4F, A // Print 'O'
0x0d,  0x52, // 0x8a:     OUT #0x52, A // Print 'R'    
0x0d,  0x3a, // 0x8b:     OUT #0x3A, A // Print ':'   

0x83,  0x36, // 0x8c:     LDR R2, #0x36
0x86,  0x06, // 0x8d:     ADD R2, #0 // Reset Carry
0x82,  0x2c, // 0x8e:     ROR R2, R2 //    36 -> 1B 
0x28,  0x20, // 0x8f:     OUT R2, I  //    (0x1B)
0x0d,  0x20, // 0x90:     OUT #0x20, A // Print ' ' 
0x82,  0x2c, // 0x91:     ROR R2, R2   // 1B -> 0D + Carry 
0x28,  0x20, // 0x92:     OUT R2, I    // (0x0D)
0x0d,  0x20, // 0x93:     OUT #0x20, A // Print ' ' 
0x82,  0x2c, // 0x94:     ROR R2, R2   // 0D -> 86 + Carry 
0x28,  0x20, // 0x95:     OUT R2, I    // (0x86)
0x0d,  0x20, // 0x96:     OUT #0x20, A // Print ' ' 
0x82,  0x2c, // 0x97:     ROR R2, R2   // 86 -> C3 
0x28,  0x20, // 0x98:     OUT R2, I    // (0xC3)
0x0d,  0x20, // 0x99:     OUT #0x20, A // Print ' ' 
0x82,  0x2c, // 0x9a:     ROR R2, R2   // C3 -> 61 + Carry 
0x28,  0x20, // 0x9b:     OUT R2, I    // (0x61) 
0x47,  0x01, // 0x9c:     BCS +02      // RELATIVE JUMP
0x01,  0x00, // 0x9d:     BRK          // Test 7 failed: Carry was not set
0xc3,  0x61, // 0x9e:     LDR R3, #0x61 
0xc2,  0xb7, // 0x9f:     SUB R3, R3, R2
0x67,  0x01, // 0xa0:     BEQ +02      // RELATIVE JUMP
0x01,  0x00, // 0xa1:     BRK          // Test 7 failed: Result is not 0x61    
0x0d,  0x10, // 0xa2:     OUT #0x10, A  // Newline

/////////////////////////////////////////////////////
// Test 8: SRAM  Immediate Load/Store   LMA / SMA  //
/////////////////////////////////////////////////////

0x2d,  0x08, // 0xa3:     OUT #08, I   // Print 08                  
0x0d,  0x20, // 0xa4:     OUT #0x20, A // Print ' '  
0x0d,  0x78, // 0xa5:     OUT #0x78, A // Print 'x'
0x0d,  0x4d, // 0xa6:     OUT #0x4D, A // Print 'M'
0x0d,  0x41, // 0xa7:     OUT #0x41, A // Print 'A'    
0x0d,  0x3a, // 0xa8:     OUT #0x3A, A // Print ':'   

0x43,  0x11, // 0xa9:     LDR R1, #0x11
0x4a,  0x10, // 0xaa:     SMA R1, #0x10 // Store 11 in address 10
0x83,  0x22, // 0xab:     LDR R2, #0x22
0x8a,  0x20, // 0xac:     SMA R2, #0x20 // Store 22 in address 20
0xc3,  0x33, // 0xad:     LDR R3, #0x33
0xca,  0x30, // 0xae:     SMA R3, #0x30 // Store 33 in address 30
  
0xc9,  0x20, // 0xaf:     LMA R3, #0x20 // Load value at address 20 into R3 (R3 = 22)
0x89,  0x10, // 0xb0:     LMA R2, #0x10 // Load value at address 10 into R2 (R2 = 11)
0x49,  0x30, // 0xb1:     LMA R1, #0x30 // Load value at address 30 into R1 (R1 = 33)
0x28,  0x10, // 0xb2:     OUT R1, I     // (0x33)
0x0d,  0x20, // 0xb3:     OUT #0x20, A  // Print ' ' 
0x42,  0x97, // 0xb4:     SUB R1, R1, R2
0x28,  0x10, // 0xb5:     OUT R1, I     // (0x22)
0x0d,  0x20, // 0xb6:     OUT #0x20, A  // Print ' ' 
0x42,  0xd7, // 0xb7:     SUB R1, R1, R3
0x28,  0x10, // 0xb8:     OUT R1, I     // (0x00)
0x67,  0x01, // 0xb9:     BEQ +02       // RELATIVE JUMP
0x01,  0x00, // 0xba:     BRK           // Test 8 failed: Result is not 0x00    
0x0d,  0x10, // 0xbb:     OUT #0x10, A  // Newline

/////////////////////////////////////////////////////
// Test 9: SRAM  Register Load/Store   LMR / SMR   //
/////////////////////////////////////////////////////

0x2d,  0x09, // 0xbc:     OUT #09, I   // Print 09                  
0x0d,  0x20, // 0xbd:     OUT #0x20, A // Print ' '  
0x0d,  0x78, // 0xbe:     OUT #0x78, A // Print 'x'
0x0d,  0x4d, // 0xbf:     OUT #0x4D, A // Print 'M'
0x0d,  0x52, // 0xc0:     OUT #0x52, A // Print 'R'    
0x0d,  0x3a, // 0xc1:     OUT #0x3A, A // Print ':'   

0x43,  0x05, // 0xc2:     LDR R1, #0x05
0x83,  0x20, // 0xc3:     LDR R2, #0x20

    //:store
0x4c,  0x20, // 0xc4:     SMR R1, R2   // Store 5 in address 20
0x08,  0x10, // 0xc5:     OUT R1, A    // (20:0x05 , 21:0x04, 22:0x03, 23:0x02, 24:0x01) 
0x0d,  0x20, // 0xc6:     OUT #0x20, A // Print ' ' 
0x86,  0x16, // 0xc7:     INC R2
0x46,  0x17, // 0xc8:     DEC R1
0xe7,  0xfa, // 0xc9:     BNE -0x05     // back to :Store 
0x0d,  0x10, // 0xca:     OUT #0x10, A // C9: Newline

0x43,  0x05, // 0xcb:     LDR R1, #0x05
0x83,  0x24, // 0xcc:     LDR R2, #0x24

    //:load
0x28,  0x20, // 0xcd:     OUT R2, I     // (0x24, 0x23, 0x22, 0x21, 0x20)  
0x0d,  0x3a, // 0xce:     OUT #0x3A, A  // Print ':' 
0xcb,  0x20, // 0xcf:     LMR R3, R2    // Load address[R2] to R3
0x08,  0x30, // 0xd0:     OUT R3, A     // (1, 2, 3, 4, 5)  
0x0d,  0x20, // 0xd1:     OUT #0x20, A  // Print ' ' 
0x86,  0x17, // 0xd2:     DEC R2
0x46,  0x17, // 0xd3:     DEC R1
0xe7,  0xf8, // 0xd4:     BNE -0x07     // back to Load 
0xc6,  0x57, // 0xd5:     SUB R3, #05   // R3 = R3 - #5
0x67,  0x01, // 0xd6:     BEQ +02       // RELATIVE JUMP
0x01,  0x00, // 0xd7:     BRK           // Test 9 failed: R3 != #5
0x0d,  0x10, // 0xd8:     OUT #0x10, A  // Newline

  
/////////////////////////////////////////////////////
// Test 10: PUSH/POP                               //
/////////////////////////////////////////////////////

0x2d,  0x0a, // 0xd9:     OUT #10, I   // Print 010                  
0x0d,  0x20, // 0xda:     OUT #0x20, A // Print ' '  
0x0d,  0x53, // 0xdb:     OUT #0x53, A // Print 'S'
0x0d,  0x54, // 0xdc:     OUT #0x54, A // Print 'T'
0x0d,  0x43, // 0xdd:     OUT #0x43, A // Print 'C'    
0x0d,  0x3a, // 0xde:     OUT #0x3A, A // Print ':'   

0x43,  0xff, // 0xdf:     LDR R1, #0xFF  // Stack max capacity
0x0e,  0x10, // 0xe0:     PUSH R1
0x46,  0x17, // 0xe1:     DEC R1 
0xe7,  0xfd, // 0xe2:     BNE -2
0x46,  0x16, // 0xe3:     INC R1
0x8f,  0x00, // 0xe4:     POP R2
    
0x0d,  0x10, // 0xe5:     OUT #0x10, A  // Newline
0x0d,  0x52, // 0xe6:     OUT #0x52, A // Print 'R'
0x0d,  0x01, // 0xe7:     OUT #01, A   // Print '1'
0x0d,  0x3a, // 0xe8:     OUT #0x3A, A // Print ':'   
0x0d,  0x20, // 0xe9:     OUT #0x20, A // Print ' '  
0x28,  0x10, // 0xea:     OUT R1, I 
0x0d,  0x20, // 0xeb:     OUT #0x20, A // Print ' '  
0x0d,  0x20, // 0xec:     OUT #0x20, A // Print ' '  
0x0d,  0x20, // 0xed:     OUT #0x20, A // Print ' '  
0x0d,  0x52, // 0xee:     OUT #0x52, A // Print 'R'
0x0d,  0x02, // 0xef:     OUT #02, A   // Print '2'
0x0d,  0x3a, // 0xf0:     OUT #0x3A, A // Print ':'   
0x0d,  0x20, // 0xf1:     OUT #0x20, A // Print ' '  
0x28,  0x20, // 0xf2:     OUT R2, I 
  
0x82,  0x67, // 0xf3:     SUB R2, R2, R1
0x67,  0x01, // 0xf4:     BEQ +2
0x01,  0x00, // 0xf5:     BRK     // Fail R1 != R2
0x46,  0x16, // 0xf6:     INC R1
0xe7,  0xec, // 0xf7:     BNE -19

// End of BIST    

0x0d,  0x50, // 0xf8:     OUT #0x50, A // Print 'P'    
0x0d,  0x41, // 0xf9:     OUT #0x41, A // Print 'A'    
0x0d,  0x53, // 0xfa:     OUT #0x53, A // Print 'S'    
0x0d,  0x53, // 0xfb:     OUT #0x53, A // Print 'S'    

0x01,  0x00, // 0xfc:     BRK  // (end of BIST) 
