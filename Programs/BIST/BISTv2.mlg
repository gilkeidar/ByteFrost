//////////////////////////////////
// Enhance to 16bit address range
// 0x0000 .. 0x1FFF  ROM 
// 0x2000 .. 0xDFFF  RAM
// 0xE000 .. 0xFFFF  Registers (MMIO)
// Set Data Pointer to  0x4000
// Set Stack Pointer to 0x7700
//////////////////////////////////

0x54,  0x40, // 0x00: LSP %DP, #0x40
0x94,  0x77, // 0x02: LSP %SP, #0x77

//////////////////////////////////
// Test 1: Shift Left (8: ASL)  //
//////////////////////////////////

0x2d,  0x01, // 0x04: OUT #01, I   // Print 01                  
0x0d,  0x20, // 0x06: OUT #0x20, A // Print ' '  
0x0d,  0x41, // 0x08: OUT #0x41, A // Print 'A'    
0x0d,  0x53, // 0x0a: OUT #0x53, A // Print 'S'
0x0d,  0x4c, // 0x0c: OUT #0x4C, A // Print 'L'    
0x0d,  0x3a, // 0x0e: OUT #0x3A, A // Print ':'   
     
0x83,  0x5a, // 0x10: LDR R2, #0x5A
0x82,  0x28, // 0x12: ASL R2, R2 
0x28,  0x20, // 0x14: OUT R2, I     //            (0xB4)
0x0d,  0x20, // 0x16: OUT #0x20, A  // Print ' '    

0x82,  0x28, // 0x18: ASL R2, R2 
0x28,  0x20, // 0x1a: OUT R2, I     //            (0x68) + Carry
0x0d,  0x20, // 0x1c: OUT #0x20, A  // Print ' '    
0x82,  0x28, // 0x1e: ASL R2, R2    // (Unlike ROL, ASL does not take the carry in back)
0x28,  0x20, // 0x20: OUT R2, I     //            (0xD0)   
0xc3,  0xd0, // 0x22: LDR R3, #0xD0 
0xc2,  0xb7, // 0x24: SUB R3, R3, R2// (carry is set)   
0x67,  0x01, // 0x26: BEQ +2        // RELATIVE JUMP
0x01,  0x00, // 0x28: BRK           // Test 1 failed
0xc6,  0x16, // 0x2a: ADD R3, #0x01 // (reset carry)
0x0d,  0x10, // 0x2c: OUT #0x10, A     // Newline

//////////////////////////////////
// Test 2: Rotate Left (9: ROL) //
//////////////////////////////////
0x2d,  0x02, // 0x2e: OUT #02, I   // Print 02                  
0x0d,  0x20, // 0x30: OUT #0x20, A // Print ' '  
0x0d,  0x52, // 0x32: OUT #0x52, A // Print 'R'    
0x0d,  0x4f, // 0x34: OUT #0x4F, A // Print 'O'
0x0d,  0x4c, // 0x36: OUT #0x4C, A // Print 'L'    
0x0d,  0x3a, // 0x38: OUT #0x3A, A // Print ':'   

0x83,  0x34, // 0x3a: LDR R2, #0x34
0x82,  0x29, // 0x3c: ROL R2, R2    // 34 -> 68 
0x28,  0x20, // 0x3e: OUT R2, I     //           (0x68)
0x0d,  0x20, // 0x40: OUT #0x20, A  // Print ' '  
0x82,  0x29, // 0x42: ROL R2, R2    // 68 -> D0 
0x28,  0x20, // 0x44: OUT R2, I     //           (0xD0)
0x0d,  0x20, // 0x46: OUT #0x20, A  // Print ' '  
0x82,  0x29, // 0x48: ROL R2, R2    // D0 -> A0 + C 
0x28,  0x20, // 0x4a: OUT R2, I     //           (0xA0)
0x0d,  0x20, // 0x4c: OUT #0x20, A  // Print ' '  
0x82,  0x29, // 0x4e: ROL R2, R2    // C+A0 -> 41 + C 
0x28,  0x20, // 0x50: OUT R2, I     //           (0x41)
0x47,  0x01, // 0x52: BCS +2        // RELATIVE JUMP
0x01,  0x00, // 0x54: BRK           // Test 2 failed: Carry was not set
0xc3,  0x41, // 0x56: LDR R3, #0x41 
0xc2,  0xb7, // 0x58: SUB R3, R3, R2
0x67,  0x01, // 0x5a: BEQ +02       // RELATIVE JUMP
0x01,  0x00, // 0x5c: BRK           // Test 2 failed: Result is not 0x41    
0x0d,  0x10, // 0x5e: OUT #0x10, A  // Newline
    
///////////////////////////////////////////
// Test 3: Logic Shift Right  (A: LSR)   //
///////////////////////////////////////////
0x2d,  0x03, // 0x60: OUT #03, I   // Print 03                  
0x0d,  0x20, // 0x62: OUT #0x20, A // Print ' '  
0x0d,  0x4c, // 0x64: OUT #0x4C, A // Print 'L'  
0x0d,  0x53, // 0x66: OUT #0x53, A // Print 'S'
0x0d,  0x52, // 0x68: OUT #0x52, A // Print 'R'    
0x0d,  0x3a, // 0x6a: OUT #0x3A, A // Print ':'   
  
0x83,  0x87, // 0x6c: LDR R2, #0x87
0x82,  0x2a, // 0x6e: LSR R2, R2    // 87 -> 43 + Carry
0x28,  0x20, // 0x70: OUT R2, I     //           (0x43)
0x0d,  0x20, // 0x72: OUT #0x20, A  // Print ' ' 
0x82,  0x2a, // 0x74: LSR R2, R2    // 43 -> 21 + Carry
0x28,  0x20, // 0x76: OUT R2, I     //           (0x21)
0x0d,  0x20, // 0x78: OUT #0x20, A  // Print ' ' 
0x47,  0x01, // 0x7a: BCS +02       // Relative
0x01,  0x00, // 0x7c: BRK           // Test 3 failed: Carry was not set
0xc3,  0x21, // 0x7e: LDR R3, #0x21 
0xc2,  0xb7, // 0x80: SUB R3, R3, R2
0x67,  0x01, // 0x82: BEQ +02       // relative
0x01,  0x00, // 0x84: BRK           // Test 3 failed: Result is not 0x21    
0x0d,  0x10, // 0x86: OUT #0x10, A  // Newline

//////////////////////////////////////////////
// Test 4: Arithmetic Shift Right  (B: ASR) //
//////////////////////////////////////////////
0x2d,  0x04, // 0x88: OUT #04, I   // Print 04                  
0x0d,  0x20, // 0x8a: OUT #0x20, A // Print ' '  
0x0d,  0x41, // 0x8c: OUT #0x41, A // Print 'A'   
0x0d,  0x53, // 0x8e: OUT #0x53, A // Print 'S'
0x0d,  0x52, // 0x90: OUT #0x52, A // Print 'R'    
0x0d,  0x3a, // 0x92: OUT #0x3A, A // Print ':'   

0x83,  0x87, // 0x94: LDR R2, #0x87
0x82,  0x2b, // 0x96: ASR R2, R2    // 87 -> C3 + Carry
0x28,  0x20, // 0x98: OUT R2, I     //           (0xC3)
0x0d,  0x20, // 0x9a: OUT #0x20, A  // Print ' '  
0x82,  0x2b, // 0x9c: ASR R2, R2    // C3 -> E1 + Carry
0x28,  0x20, // 0x9e: OUT R2, I     //           (0xE1)
0x47,  0x01, // 0xa0: BCS +02       // Relative
0x01,  0x00, // 0xa2: BRK           // Test 4 failed: Carry was not set
0xc3,  0xe1, // 0xa4: LDR R3, #0xE1 
0xc2,  0xb7, // 0xa6: SUB R3, R3, R2
0x67,  0x01, // 0xa8: BEQ +02       // Relative
0x01,  0x00, // 0xaa: BRK           // Test 4 failed: Result is not 0xE1    
0x0d,  0x10, // 0xac: OUT #0x10, A  // Newline

//////////////////////////////////////////////
// Test 5: Add 0x1234 + 0x6DCD =  0x8001    //
//////////////////////////////////////////////
 
0x2d,  0x05, // 0xae:     OUT #05, I   // Print 05                  
0x0d,  0x20, // 0xb0:     OUT #0x20, A // Print ' '  
0x0d,  0x41, // 0xb2:     OUT #0x41, A // Print 'A'   
0x0d,  0x44, // 0xb4:     OUT #0x44, A // Print 'D'
0x0d,  0x44, // 0xb6:     OUT #0x44, A // Print 'D'    
0x0d,  0x3a, // 0xb8:     OUT #0x3A, A // Print ':'   

0x83,  0x34, // 0xba:     LDR R2, #0x34
0x43,  0xcd, // 0xbc:     LDR R1, #0xCD
0xc2,  0x66, // 0xbe:     ADD R3, R2, R1    // 34 + CD =  0x01 + Carry
0x28,  0x30, // 0xc0:     OUT R3, I    //  (0x01)
0x0d,  0x20, // 0xc2:     OUT #0x20, A // Print ' '  
    
0x47,  0x01, // 0xc4:     BCS +02      // Relative
0x01,  0x00, // 0xc6:     BRK          // Test 5 failed: Carry was not set
0x83,  0x12, // 0xc8:     LDR R2, #0x12
0x43,  0x6d, // 0xca:     LDR R1, #0x6D
0xc2,  0x6e, // 0xcc:     ADC R3, R2, R1  // 0x80 = 0x12 + 0x6D + Carry  
0x28,  0x30, // 0xce:     OUT R3, I    //       (0x80)
0xc7,  0x01, // 0xd0:     BCC +02      // Relative
0x01,  0x00, // 0xd2:     BRK          // Test 5 failed: Carry was  set
0x83,  0x80, // 0xd4:     LDR R2, #0x80
0xc2,  0xb7, // 0xd6:     SUB R3, R3, R2
0x67,  0x01, // 0xd8:     BEQ +02      // Relative
0x01,  0x00, // 0xda:     BRK          // Test 5 failed: Result is not 0x80    
0x0d,  0x10, // 0xdc:     OUT #0x10, A  // Newline

//////////////////////////////////////////////
// Test 6: Sub (0xA765 â€“ 0x34AB) = 0x72BA   //  
//////////////////////////////////////////////

0x2d,  0x06, // 0xde:     OUT #06, I   // Print 06                  
0x0d,  0x20, // 0xe0:     OUT #0x20, A // Print ' '  
0x0d,  0x53, // 0xe2:     OUT #0x53, A // Print 'S'
0x0d,  0x55, // 0xe4:     OUT #0x55, A // Print 'U'
0x0d,  0x42, // 0xe6:     OUT #0x42, A // Print 'B'    
0x0d,  0x3a, // 0xe8:     OUT #0x3A, A // Print ':'   

0x83,  0x65, // 0xea:     LDR R2, #0x65
0x43,  0xab, // 0xec:     LDR R1, #0xAB
0xc2,  0x67, // 0xee:     SUB R3, R2, R1    // 65 - AB =  0xBA + Carry
0x28,  0x30, // 0xf0:     OUT R3, I         // (0xBA) (No carry, means borrow)
0x0d,  0x20, // 0xf2:     OUT #0x20, A      // Print ' '  
0xc7,  0x01, // 0xf4:     BCC +02           // Relative
0x01,  0x00, // 0xf6:     BRK               // Test 6 failed: Carry was set
0x83,  0xa7, // 0xf8:     LDR R2, #0xA7
0x43,  0x34, // 0xfa:     LDR R1, #0x34
0xc2,  0x6f, // 0xfc:     SBC R3, R2, R1    // R2 - R1 + Cin = A7 - 34 + Cin = 72 + Cout
0x28,  0x30, // 0xfe:     OUT R3, I         //  (0x72)
0x47,  0x01, // 0x100:     BCS +02           // Relative
0x01,  0x00, // 0x102:     BRK               // Test 6 failed: Carry was not set
0x83,  0x72, // 0x104:     LDR R2, #0x72
0xc2,  0xb7, // 0x106:     SUB R3, R3, R2
0x67,  0x01, // 0x108:     BEQ +02      // Relative
0x01,  0x00, // 0x10a:     BRK          // Test 6 failed: Result is not 0x72       
0x0d,  0x10, // 0x10c:     OUT #0x10, A  // Newline

////////////////////////////////////
// Test 7: Rotate Right (C: ROR)  //
////////////////////////////////////

0x0d,  0x07, // 0x10e:     OUT #07, A   // Print 7                  
0x0d,  0x20, // 0x110:     OUT #0x20, A // Print ' '  
0x0d,  0x52, // 0x112:     OUT #0x52, A // Print 'R'    
0x0d,  0x4f, // 0x114:     OUT #0x4F, A // Print 'O'
0x0d,  0x52, // 0x116:     OUT #0x52, A // Print 'R'    
0x0d,  0x3a, // 0x118:     OUT #0x3A, A // Print ':'   

0x83,  0x36, // 0x11a:     LDR R2, #0x36
0x86,  0x06, // 0x11c:     ADD R2, #0 // Reset Carry
0x82,  0x2c, // 0x11e:     ROR R2, R2 //    36 -> 1B 
0x28,  0x20, // 0x120:     OUT R2, I  //    (0x1B)
0x0d,  0x20, // 0x122:     OUT #0x20, A // Print ' ' 
0x82,  0x2c, // 0x124:     ROR R2, R2   // 1B -> 0D + Carry 
0x28,  0x20, // 0x126:     OUT R2, I    // (0x0D)
0x0d,  0x20, // 0x128:     OUT #0x20, A // Print ' ' 
0x82,  0x2c, // 0x12a:     ROR R2, R2   // 0D -> 86 + Carry 
0x28,  0x20, // 0x12c:     OUT R2, I    // (0x86)
0x0d,  0x20, // 0x12e:     OUT #0x20, A // Print ' ' 
0x82,  0x2c, // 0x130:     ROR R2, R2   // 86 -> C3 
0x28,  0x20, // 0x132:     OUT R2, I    // (0xC3)
0x0d,  0x20, // 0x134:     OUT #0x20, A // Print ' ' 
0x82,  0x2c, // 0x136:     ROR R2, R2   // C3 -> 61 + Carry 
0x28,  0x20, // 0x138:     OUT R2, I    // (0x61) 
0x47,  0x01, // 0x13a:     BCS +02      // RELATIVE JUMP
0x01,  0x00, // 0x13c:     BRK          // Test 7 failed: Carry was not set
0xc3,  0x61, // 0x13e:     LDR R3, #0x61 
0xc2,  0xb7, // 0x140:     SUB R3, R3, R2
0x67,  0x01, // 0x142:     BEQ +02      // RELATIVE JUMP
0x01,  0x00, // 0x144:     BRK          // Test 7 failed: Result is not 0x61    
0x0d,  0x10, // 0x146:     OUT #0x10, A  // Newline

/////////////////////////////////////////////////////
// Test 8: SRAM  Immediate Load/Store   LMA / SMA  //
/////////////////////////////////////////////////////

0x2d,  0x08, // 0x148:     OUT #08, I   // Print 08                  
0x0d,  0x20, // 0x14a:     OUT #0x20, A // Print ' '  
0x0d,  0x78, // 0x14c:     OUT #0x78, A // Print 'x'
0x0d,  0x4d, // 0x14e:     OUT #0x4D, A // Print 'M'
0x0d,  0x41, // 0x150:     OUT #0x41, A // Print 'A'    
0x0d,  0x3a, // 0x152:     OUT #0x3A, A // Print ':'   

0x43,  0x11, // 0x154:     LDR R1, #0x11
0x4a,  0x10, // 0x156:     SMA R1, #0x10 // Store 11 in address 10
0x83,  0x22, // 0x158:     LDR R2, #0x22
0x8a,  0x20, // 0x15a:     SMA R2, #0x20 // Store 22 in address 20
0xc3,  0x33, // 0x15c:     LDR R3, #0x33
0xca,  0x30, // 0x15e:     SMA R3, #0x30 // Store 33 in address 30
  
0xc9,  0x20, // 0x160:     LMA R3, #0x20 // Load value at address 20 into R3 (R3 = 22)
0x89,  0x10, // 0x162:     LMA R2, #0x10 // Load value at address 10 into R2 (R2 = 11)
0x49,  0x30, // 0x164:     LMA R1, #0x30 // Load value at address 30 into R1 (R1 = 33)
0x28,  0x10, // 0x166:     OUT R1, I     // (0x33)
0x0d,  0x20, // 0x168:     OUT #0x20, A  // Print ' ' 
0x42,  0x97, // 0x16a:     SUB R1, R1, R2
0x28,  0x10, // 0x16c:     OUT R1, I     // (0x22)
0x0d,  0x20, // 0x16e:     OUT #0x20, A  // Print ' ' 
0x42,  0xd7, // 0x170:     SUB R1, R1, R3
0x28,  0x10, // 0x172:     OUT R1, I     // (0x00)
0x67,  0x01, // 0x174:     BEQ +02       // RELATIVE JUMP
0x01,  0x00, // 0x176:     BRK           // Test 8 failed: Result is not 0x00    
0x0d,  0x10, // 0x178:     OUT #0x10, A  // Newline

/////////////////////////////////////////////////////
// Test 9: SRAM  Register Load/Store   LMR / SMR   //
/////////////////////////////////////////////////////

0x2d,  0x09, // 0x17a:     OUT #09, I   // Print 09                  
0x0d,  0x20, // 0x17c:     OUT #0x20, A // Print ' '  
0x0d,  0x78, // 0x17e:     OUT #0x78, A // Print 'x'
0x0d,  0x4d, // 0x180:     OUT #0x4D, A // Print 'M'
0x0d,  0x52, // 0x182:     OUT #0x52, A // Print 'R'    
0x0d,  0x3a, // 0x184:     OUT #0x3A, A // Print ':'   

0x43,  0x05, // 0x186:     LDR R1, #0x05
0x83,  0x20, // 0x188:     LDR R2, #0x20

    //:store
0x4c,  0x20, // 0x18a:     SMR R1, R2   // Store 5 in address 20
0x08,  0x10, // 0x18c:     OUT R1, A    // (20:0x05 , 21:0x04, 22:0x03, 23:0x02, 24:0x01) 
0x0d,  0x20, // 0x18e:     OUT #0x20, A // Print ' ' 
0x86,  0x16, // 0x190:     INC R2
0x46,  0x17, // 0x192:     DEC R1
0xe7,  0xfa, // 0x194:     BNE -0x05     // back to :Store 
0x0d,  0x10, // 0x196:     OUT #0x10, A // C9: Newline

0x43,  0x05, // 0x198:     LDR R1, #0x05
0x83,  0x24, // 0x19a:     LDR R2, #0x24

    //:load
0x28,  0x20, // 0x19c:     OUT R2, I     // (0x24, 0x23, 0x22, 0x21, 0x20)  
0x0d,  0x3a, // 0x19e:     OUT #0x3A, A  // Print ':' 
0xcb,  0x20, // 0x1a0:     LMR R3, R2    // Load address[R2] to R3
0x08,  0x30, // 0x1a2:     OUT R3, A     // (1, 2, 3, 4, 5)  
0x0d,  0x20, // 0x1a4:     OUT #0x20, A  // Print ' ' 
0x86,  0x17, // 0x1a6:     DEC R2
0x46,  0x17, // 0x1a8:     DEC R1
0xe7,  0xf8, // 0x1aa:     BNE -0x07     // back to Load 
0xc6,  0x57, // 0x1ac:     SUB R3, #05   // R3 = R3 - #5
0x67,  0x01, // 0x1ae:     BEQ +02       // RELATIVE JUMP
0x01,  0x00, // 0x1b0:     BRK           // Test 9 failed: R3 != #5
0x0d,  0x10, // 0x1b2:     OUT #0x10, A  // Newline

  
/////////////////////////////////////////////////////
// Test 10: PUSH/POP                               //
/////////////////////////////////////////////////////

0x2d,  0x0a, // 0x1b4:     OUT #10, I   // Print 010                  
0x0d,  0x20, // 0x1b6:     OUT #0x20, A // Print ' '  
0x0d,  0x53, // 0x1b8:     OUT #0x53, A // Print 'S'
0x0d,  0x54, // 0x1ba:     OUT #0x54, A // Print 'T'
0x0d,  0x43, // 0x1bc:     OUT #0x43, A // Print 'C'    
0x0d,  0x3a, // 0x1be:     OUT #0x3A, A // Print ':'   

0x43,  0xff, // 0x1c0:     LDR R1, #0xFF  // Stack max capacity
	// Push Loop
0x0e,  0x10, // 0x1c2:     PUSH R1
0x46,  0x17, // 0x1c4:     DEC R1 
0xe7,  0xfd, // 0x1c6:     BNE -2
	// Pop & Check loop
0x46,  0x16, // 0x1c8:     INC R1
0x8f,  0x00, // 0x1ca:     POP R2
0x0d,  0x10, // 0x1cc:     OUT #0x10, A  // Newline
0x0d,  0x52, // 0x1ce:     OUT #0x52, A // Print 'R'
0x0d,  0x01, // 0x1d0:     OUT #01, A   // Print '1'
0x0d,  0x3a, // 0x1d2:     OUT #0x3A, A // Print ':'   
0x0d,  0x20, // 0x1d4:     OUT #0x20, A // Print ' '  
0x28,  0x10, // 0x1d6:     OUT R1, I 
0x0d,  0x20, // 0x1d8:     OUT #0x20, A // Print ' '  
0x0d,  0x20, // 0x1da:     OUT #0x20, A // Print ' '  
0x0d,  0x20, // 0x1dc:     OUT #0x20, A // Print ' '  
0x0d,  0x52, // 0x1de:     OUT #0x52, A // Print 'R'
0x0d,  0x02, // 0x1e0:     OUT #02, A   // Print '2'
0x0d,  0x3a, // 0x1e2:     OUT #0x3A, A // Print ':'   
0x0d,  0x20, // 0x1e4:     OUT #0x20, A // Print ' '  
0x28,  0x20, // 0x1e6:     OUT R2, I 
  
0x82,  0x67, // 0x1e8:     SUB R2, R2, R1
0x67,  0x01, // 0x1ea:     BEQ +2
0x01,  0x00, // 0x1ec:     BRK     // Fail R1 != R2
0x46,  0x16, // 0x1ee: 	INC R1 
0xe7,  0xec, // 0x1f0:     BNE -19

// End of BIST    
0x0d,  0x10, // 0x1f2:     OUT #0x10, A  // Newline
0x0d,  0x50, // 0x1f4:     OUT #0x50, A // Print 'P'    
0x0d,  0x41, // 0x1f6:     OUT #0x41, A // Print 'A'    
0x0d,  0x53, // 0x1f8:     OUT #0x53, A // Print 'S'    
0x0d,  0x53, // 0x1fa:     OUT #0x53, A // Print 'S'    

0x01,  0x00, // 0x1fc:     BRK  // (end of BIST) 
   
