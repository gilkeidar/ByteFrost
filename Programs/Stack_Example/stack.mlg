0x03,  0x00, // 0x01: LDR R0, #0      // R0 = 0
0x43,  0x09, // 0x02: LDR R1, #9      // R1 = 9
0x0e,  0x00, // 0x03: PUSH R0         // Push R0 onto the stack
0x08,  0x00, // 0x04: OUT R0, A       // Print value of R0
0x06,  0x16, // 0x05: INC R0          // R0++
0x82,  0x47, // 0x06: SUB R2, R0, R1  // R2 = R0 - 9
0xe5,  0x02, // 0x07: BNE #3          // If R0 != 9, goto 3
0x0d,  0x20, // 0x08: OUT #0x20, A    // Print ' '
0xcf,  0x00, // 0x09: POP R3          // Pop top value from stack and store in R3
0x08,  0x30, // 0x0a: OUT R3, A       // Print R3
0x06,  0x17, // 0x0b: DEC R0          // R0--
0xe5,  0x08, // 0x0c: BNE #9          // If R0 > 0, goto 9
0x0d,  0x10, // 0x0d: OUT #0x10, A    // Print '\n'
0x05,  0x00, // 0x0e: JMP #01
