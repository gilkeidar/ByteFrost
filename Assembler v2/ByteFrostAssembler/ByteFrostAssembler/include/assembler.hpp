#pragma once
#include "clap.hpp"
#include "parser.hpp"
#include "preprocessor.hpp"
#include "label_handler.hpp"
#include "file_generation.hpp"
#include "assembly_instructions.hpp"

/**
 * @brief Assembler class. Contains all objects that handle software pipeline
 *	stages and any "global" assembler state.
 */
class Assembler {
public:
	/**
	 * @brief Assembler constructor that takes in command-line arguments
	 * @param argc The number of command-line arguments.
	 * @param argv Array of char arrays (strings) that contain the command-line
	 *				arguments.
	 */
	Assembler(int argc, char** argv);

	/**
	 * @brief Runs the Assembler to produce an output file with assembled 
	 * machine language.
	 */
	void run();

private:
	//	Global data

	//	TODO: Add Config object instance

	//	Command-Line Arguments

	/**
	 * @brief Command-Line Arguments object generated by the CLAP after it
	 * parses the Assembler's command-line arguments.
	 */
	CommandLineArguments * commandLineArguments;

	//	Line vector

	/**
	 * @brief Vector of Line pointers generated by the Parser upon reading the
	 * input .asm file.
	 */
	std::vector<Line*> lines;

	//	Assembly Instruction hashmap 
	//	(string name -> vector<AssemblyInstruction>)

	/**
	 * @brief Hashmap of Assembly Instructions 
	 * (string name -> vector<AssemblyInstruction> of all AssemblyInstructions
	 * with that name)
	 */
	std::unordered_map<std::string, std::vector<AssemblyInstruction>> instructions;

	//	Preprocessor Directive hashmap
	//	(string name -> Directive)

	/**
	 * @brief Hashmap of Preprocessor Directives
	 * (string name -> Directive with that name)
	 */
	std::unordered_map<std::string, Directive> directives;

	/**
	 * @brief Populate Assembly Instruction hashmap.
	 */
	void initializeAssemblyInstructions();

	/**
	 * @brief Populate Directive hashmap.
	 */
	void initializePreprocessorDirectives();

	//	Pipeline Stage 0: Command-Line Argument Parser (CLAP)

	/**
	 * @brief CLAP object which handles Pipeline Stage 0; it parses the
	 * command-line arguments given to the Assembler and produces a
	 * CommandLineArguments object.
	 */
	CLAP clap;

	//	Pipeline Stage 1: Parser

	/**
	 * @brief Parser object which handles Pipeline Stage 1; it opens and parses
	 * the input .asm file, producing a std::vector<Line *> lines which
	 * contains the semantic information and useful data of every line in the
	 * input .asm file.
	 */
	Parser parser;

	//	Pipeline Stage 2: Preprocessor

	/**
	 * @brief Preprocessor object which handles Pipeline Stage 2; it passes
	 * through the lines vector generated by the Parser, handling all 
	 * preprocessor directives and replacing preprocessor constant arguments
	 * in instruction lines with their defined values.
	 */
	Preprocessor preprocessor;

	//	Pipeline Stage 3: Label Handler

	/**
	 * @brief LabelHandler object which handles Pipeline Stage 3; it passes
	 * through the lines vector, keeping track of all label declarations, and
	 * replaces label arguments in instruction lines with their corresponding
	 * addresses.
	 */
	LabelHandler label_handler;

	//	Pipeline Stage 4: Output File Generation

	/**
	 * @brief OutputFileGenerator object which handles Pipeline Stage 4; it
	 * iterates through the lines vector and generates an output machine
	 * language file.
	 */
	OutputFileGenerator file_generator;
};